Generate Mock Data
==================

In this example we generate mock data with a variety of systematic
effects including photometric redshifts, source galaxy distributions,
and shape noise. We then populate a galaxy cluster object

.. code:: ipython3

    import clmm
    import numpy as np
    import matplotlib.pyplot as plt
    %matplotlib inline

Import mock data module and setup the configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    import sys
    sys.path.append('./support')
    import mock_data as mock

Mock data generation requires a defined cosmology

.. code:: ipython3

    from astropy.cosmology import FlatLambdaCDM
    mock_cosmo = FlatLambdaCDM(H0=70, Om0=0.27, Ob0=0.045)

Mock data generation requires some cluster information

.. code:: ipython3

    cosmo = mock_cosmo
    cluster_id = "Awesome_cluster"
    cluster_m = 1.e15
    cluster_z = 0.3
    src_z = 0.8
    concentration = 4
    ngals = 1000 # number of source galaxies
    Delta = 200 # mass definition with respect to critical overdensity
    cluster_ra = 0.0
    cluster_dec = 0.0


Generate the mock catalog with different options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clean data: no noise, all galaxies at the same redshift

.. code:: ipython3

    ideal_data = mock.generate_galaxy_catalog(cluster_m, cluster_z, concentration,
                                              cosmo, ngals, Delta, src_z)

Noisy data: shape noise, all galaxies at the same redshift

.. code:: ipython3

    noisy_data_src_z = mock.generate_galaxy_catalog(cluster_m,
                                                cluster_z,
                                                concentration,
                                                cosmo,
                                                ngals,
                                                Delta,
                                                src_z,
                                                shapenoise=0.005,
                                                photoz_sigma_unscaled=0.05)


Noisy data: photo-z errors (and pdfs!), all galaxies at the same
redshift

.. code:: ipython3

    noisy_data_photoz = mock.generate_galaxy_catalog(cluster_m,
                                                cluster_z,
                                                concentration,
                                                cosmo,
                                                ngals,
                                                Delta,
                                                'chang13',
                                                shapenoise=0.005,
                                                photoz_sigma_unscaled=0.05)

Clean data: source galaxy redshifts drawn from Chang et al.Â 2013

.. code:: ipython3

    ideal_with_src_dist = mock.generate_galaxy_catalog(cluster_m, cluster_z, concentration,
                                              cosmo, ngals, Delta, 'chang13',zsrc_max=7.0)


Noisy data: galaxies following redshift distribution, redshift error,
shape noise

.. code:: ipython3

    allsystematics = mock.generate_galaxy_catalog(cluster_m, cluster_z, concentration,
                                              cosmo, ngals, Delta, 'chang13',zsrc_max=7.0,
                                                  shapenoise=0.005, photoz_sigma_unscaled=0.05)

Inspect the catalog data
~~~~~~~~~~~~~~~~~~~~~~~~

Ideal catalog first entries: no noise on the shape measurement, all
galaxies at z=0.8

.. code:: ipython3

    ideal_data[0:3]




.. raw:: html

    <i>Table length=3</i>
    <table id="table4823218256" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ra</th><th>dec</th><th>e1</th><th>e2</th><th>z</th><th>id</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>-0.0392812766284939</td><td>0.22376765643283456</td><td>0.01086181730321864</td><td>-0.0039347264357670695</td><td>0.8</td><td>0</td></tr>
    <tr><td>0.3509861423685997</td><td>0.20203467887960416</td><td>-0.002715166070566668</td><td>0.004674724570835385</td><td>0.8</td><td>1</td></tr>
    <tr><td>-0.023631257804547896</td><td>0.18827578929872243</td><td>0.013909086225530005</td><td>-0.0035474574895646266</td><td>0.8</td><td>2</td></tr>
    </table>



With photo-z errors

.. code:: ipython3

    noisy_data_photoz[0:3]




.. raw:: html

    <i>Table length=3</i>
    <table id="table4825070160" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ra</th><th>dec</th><th>e1</th><th>e2</th><th>z</th><th>pzbins [34]</th><th>pzpdf [34]</th><th>id</th></tr></thead>
    <thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>0.026276071503130872</td><td>-0.17817485665907684</td><td>0.013703821165429427</td><td>-0.004131760545430609</td><td>0.4337756455220653</td><td>-0.06557975295726448 .. 0.9244202470427355</td><td>1.554685152783574e-10 .. 4.0697323723792555e-10</td><td>0</td></tr>
    <tr><td>-0.3282198131443848</td><td>-0.19385251485528968</td><td>-0.007188331273721686</td><td>0.013039773657638424</td><td>0.8495625219828421</td><td>0.3185608706011205 .. 1.3085608706011214</td><td>1.1919174983776805e-06 .. 2.1689944970739656e-06</td><td>1</td></tr>
    <tr><td>-0.3391028072038778</td><td>-0.1890909158918944</td><td>-0.002258499783812182</td><td>0.0036553854346634183</td><td>0.6415420438435552</td><td>0.17255185264262585 .. 1.162551852642626</td><td>8.244726875960056e-08 .. 1.6732725538280174e-07</td><td>2</td></tr>
    </table>



.. code:: ipython3

    # Histogram of the redshift distribution of bkg galaxies (starting at z_cluster + 0.1)
    hist = plt.hist(allsystematics['z'], bins=50)
    plt.xlabel('Source Redshift')




.. parsed-literal::

    Text(0.5, 0, 'Source Redshift')




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_25_1.png


.. code:: ipython3

    # pdz for the first galaxy in the catalog
    plt.plot(allsystematics['pzbins'][0], allsystematics['pzpdf'][0])
    plt.xlabel('Redshift')
    plt.ylabel('Photo-z Probability Distribution')




.. parsed-literal::

    Text(0, 0.5, 'Photo-z Probability Distribution')




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_26_1.png


Populate in a galaxy cluster object

.. code:: ipython3

    # At the moment mock data only allow for a cluster centred on (0,0)
    cluster_ra = 0.0
    cluster_dec = 0.0
    gc_object = clmm.GalaxyCluster(cluster_id, cluster_ra, cluster_dec, 
                                   cluster_z, allsystematics)

Plot source galaxy ellipticities

.. code:: ipython3

    plt.scatter(gc_object.galcat['e1'],gc_object.galcat['e2'])
    
    plt.xlim(-0.2, 0.2)
    plt.ylim(-0.2, 0.2)
    plt.xlabel('Ellipticity 1',fontsize='x-large')
    plt.ylabel('Ellipticity 2',fontsize='x-large')




.. parsed-literal::

    Text(0, 0.5, 'Ellipticity 2')




.. image:: demo_generate_mock_cluster_files/demo_generate_mock_cluster_30_1.png


